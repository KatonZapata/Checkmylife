CREATE DATABASE IF NOT EXISTS CheckmyLife;
USE CheckmyLife;

-- 2. Tabla 'personas'
-- Almacena la información general de los usuarios (base para Conductores y Coordinadores)
CREATE TABLE IF NOT EXISTS personas (
    id_persona INT AUTO_INCREMENT PRIMARY KEY,
    nombres VARCHAR(255) NOT NULL,
    apellidos VARCHAR(255) NOT NULL,
    celular VARCHAR(20) NOT NULL, -- Cambiado a VARCHAR para permitir prefijos o formatos internacionales
    documento VARCHAR(50) UNIQUE NOT NULL, -- Cambiado a VARCHAR por si contiene letras o formatos específicos
    usuario VARCHAR(100) UNIQUE NOT NULL,
    contrasena VARCHAR(255) NOT NULL, -- Almacenar hashes de contraseñas, nunca texto plano
    email VARCHAR(255) UNIQUE NOT NULL
);

-- 3. Tabla 'coordinadores'
-- Información específica de los coordinadores, extendiendo de 'personas'
CREATE TABLE IF NOT EXISTS coordinadores (
    id_coordinador INT PRIMARY KEY, -- id_coordinador es también la FK a personas.id_persona
    id_persona INT UNIQUE NOT NULL,
    area VARCHAR(255),
    FOREIGN KEY (id_persona) REFERENCES personas(id_persona)
        ON DELETE CASCADE -- Si una persona es eliminada, también se elimina su rol de coordinador
        ON UPDATE CASCADE
);

-- 4. Tabla 'vehiculos'
-- Información general de los vehículos
CREATE TABLE IF NOT EXISTS vehiculos (
    id_vehiculo INT AUTO_INCREMENT PRIMARY KEY,
    placa VARCHAR(20) UNIQUE NOT NULL,
    marca VARCHAR(100) NOT NULL,
    modelo INT NOT NULL
);

-- 5. Tabla 'conductores'
-- Información específica de los conductores, extendiendo de 'personas'
-- Incluye la asignación actual de un vehículo (opcionalmente NULL si no tiene uno asignado)
CREATE TABLE IF NOT EXISTS conductores (
    id_conductor INT PRIMARY KEY, -- id_conductor es también la FK a personas.id_persona
    id_persona INT UNIQUE NOT NULL,
    licencia VARCHAR(50) NOT NULL, -- Tipo de licencia, cambiado a VARCHAR
    huella VARCHAR(255), -- Asumiendo que es un identificador o ruta a un archivo de huella
    id_vehiculo_asignado INT, -- Clave foránea al vehículo que tiene asignado
    FOREIGN KEY (id_persona) REFERENCES personas(id_persona)
        ON DELETE CASCADE
        ON UPDATE CASCADE,
    FOREIGN KEY (id_vehiculo_asignado) REFERENCES vehiculos(id_vehiculo)
        ON DELETE SET NULL -- Si el vehículo es eliminado, la asignación se establece a NULL
        ON UPDATE CASCADE
);


-- 6. Tabla 'vehiculos_particulares'
-- Detalles de vehículos particulares, extendiendo de 'vehiculos'
CREATE TABLE IF NOT EXISTS vehiculos_particulares (
    id_vehiculo_particular INT PRIMARY KEY, -- id_vehiculo_particular es también la FK a vehiculos.id_vehiculo
    id_vehiculo INT UNIQUE NOT NULL,
    uso_personal BOOLEAN NOT NULL,
    FOREIGN KEY (id_vehiculo) REFERENCES vehiculos(id_vehiculo)
        ON DELETE CASCADE -- Si un vehículo base es eliminado, también lo es su detalle particular
        ON UPDATE CASCADE
);

-- 7. Tabla 'vehiculos_privados'
-- Detalles de vehículos privados, extendiendo de 'vehiculos'
CREATE TABLE IF NOT EXISTS vehiculos_privados (
    id_vehiculo_privado INT PRIMARY KEY, -- id_vehiculo_privado es también la FK a vehiculos.id_vehiculo
    id_vehiculo INT UNIQUE NOT NULL,
    empresa_propietario VARCHAR(255) NOT NULL,
    FOREIGN KEY (id_vehiculo) REFERENCES vehiculos(id_vehiculo)
        ON DELETE CASCADE -- Si un vehículo base es eliminado, también lo es su detalle privado
        ON UPDATE CASCADE
);

-- 8. Tabla 'rutas'
-- Define las rutas a seguir
CREATE TABLE IF NOT EXISTS rutas (
    id_ruta INT AUTO_INCREMENT PRIMARY KEY,
    origen VARCHAR(255) NOT NULL,
    destino VARCHAR(255) NOT NULL,
    distancia DECIMAL(10, 2), -- Permite almacenar distancias con decimales
    fecha_inicio DATE NOT NULL,
    fecha_terminacion DATE NOT NULL,
    id_coordinador INT NOT NULL, -- El coordinador que gestiona esta ruta
    FOREIGN KEY (id_coordinador) REFERENCES coordinadores(id_coordinador)
        ON DELETE RESTRICT -- No permite eliminar un coordinador si tiene rutas asociadas
        ON UPDATE CASCADE
);

-- 9. Tabla de relación/asociación 'asignaciones_ruta'
-- Representa la ejecución de una ruta por un conductor y un vehículo específico.
-- Esto modela la acción de "ingresarRuta" tanto del Vehículo como del Conductor.
CREATE TABLE IF NOT EXISTS asignaciones_ruta (
    id_asignacion INT AUTO_INCREMENT PRIMARY KEY,
    id_ruta INT NOT NULL,
    id_conductor INT NOT NULL,
    id_vehiculo INT NOT NULL,
    fecha_hora_asignacion DATETIME DEFAULT CURRENT_TIMESTAMP, -- Momento en que se asigna/inicia la ruta
    estado ENUM('Pendiente', 'En Curso', 'Completada', 'Cancelada') DEFAULT 'Pendiente', -- Opcional: para el seguimiento del estado
    FOREIGN KEY (id_ruta) REFERENCES rutas(id_ruta)
        ON DELETE RESTRICT
        ON UPDATE CASCADE,
    FOREIGN KEY (id_conductor) REFERENCES conductores(id_conductor)
        ON DELETE RESTRICT
        ON UPDATE CASCADE,
    FOREIGN KEY (id_vehiculo) REFERENCES vehiculos(id_vehiculo)
        ON DELETE RESTRICT
        ON UPDATE CASCADE
);

-- Opcional: Índices para mejorar el rendimiento en búsquedas comunes
CREATE INDEX idx_personas_usuario ON personas (usuario);
CREATE INDEX idx_personas_email ON personas (email);
CREATE INDEX idx_vehiculos_placa ON vehiculos (placa);
CREATE INDEX idx_rutas_coordinador ON rutas (id_coordinador);
CREATE INDEX idx_asignaciones_ruta_ruta ON asignaciones_ruta (id_ruta);
CREATE INDEX idx_asignaciones_ruta_conductor ON asignaciones_ruta (id_conductor);
CREATE INDEX idx_asignaciones_ruta_vehiculo ON asignaciones_ruta (id_vehiculo);
